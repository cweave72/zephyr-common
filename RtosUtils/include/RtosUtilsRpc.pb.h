/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_RTOS_RTOSUTILSRPC_PB_H_INCLUDED
#define PB_RTOS_RTOSUTILSRPC_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _rtos_TaskState {
    rtos_TaskState_running = 0,
    rtos_TaskState_ready = 1,
    rtos_TaskState_blocked = 2,
    rtos_TaskState_suspended = 3,
    rtos_TaskState_deleted = 4,
    rtos_TaskState_invalid = 5
} rtos_TaskState;

/* Struct definitions */
typedef struct _rtos_TaskInfo {
    /* Task name */
    char name[16];
    /* Task unique number */
    uint32_t number;
    /* State */
    rtos_TaskState state;
    /* Priority */
    uint32_t prio;
    /* Runtime count */
    uint32_t rtc;
    /* Stack remaining (aka high watermark) */
    uint32_t stack_remaining;
    /* Core number */
    int32_t core_num;
} rtos_TaskInfo;

/* Get information on all rtos tasks. */
typedef struct _rtos_GetSystemTasks_call {
    char dummy_field;
} rtos_GetSystemTasks_call;

typedef struct _rtos_GetSystemTasks_reply {
    /* Total run time */
    uint64_t run_time;
    pb_size_t task_info_count;
    rtos_TaskInfo task_info[16];
} rtos_GetSystemTasks_reply;

typedef struct _rtos_RtosUtilsCallset {
    pb_size_t which_msg;
    union {
        rtos_GetSystemTasks_call getSystemTasks_call;
        rtos_GetSystemTasks_reply getSystemTasks_reply;
    } msg;
} rtos_RtosUtilsCallset;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _rtos_TaskState_MIN rtos_TaskState_running
#define _rtos_TaskState_MAX rtos_TaskState_invalid
#define _rtos_TaskState_ARRAYSIZE ((rtos_TaskState)(rtos_TaskState_invalid+1))

#define rtos_TaskInfo_state_ENUMTYPE rtos_TaskState





/* Initializer values for message structs */
#define rtos_TaskInfo_init_default               {"", 0, _rtos_TaskState_MIN, 0, 0, 0, 0}
#define rtos_GetSystemTasks_call_init_default    {0}
#define rtos_GetSystemTasks_reply_init_default   {0, 0, {rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default, rtos_TaskInfo_init_default}}
#define rtos_RtosUtilsCallset_init_default       {0, {rtos_GetSystemTasks_call_init_default}}
#define rtos_TaskInfo_init_zero                  {"", 0, _rtos_TaskState_MIN, 0, 0, 0, 0}
#define rtos_GetSystemTasks_call_init_zero       {0}
#define rtos_GetSystemTasks_reply_init_zero      {0, 0, {rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero, rtos_TaskInfo_init_zero}}
#define rtos_RtosUtilsCallset_init_zero          {0, {rtos_GetSystemTasks_call_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define rtos_TaskInfo_name_tag                   1
#define rtos_TaskInfo_number_tag                 2
#define rtos_TaskInfo_state_tag                  3
#define rtos_TaskInfo_prio_tag                   4
#define rtos_TaskInfo_rtc_tag                    5
#define rtos_TaskInfo_stack_remaining_tag        6
#define rtos_TaskInfo_core_num_tag               7
#define rtos_GetSystemTasks_reply_run_time_tag   1
#define rtos_GetSystemTasks_reply_task_info_tag  2
#define rtos_RtosUtilsCallset_getSystemTasks_call_tag 1
#define rtos_RtosUtilsCallset_getSystemTasks_reply_tag 2

/* Struct field encoding specification for nanopb */
#define rtos_TaskInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   name,              1) \
X(a, STATIC,   SINGULAR, UINT32,   number,            2) \
X(a, STATIC,   SINGULAR, UENUM,    state,             3) \
X(a, STATIC,   SINGULAR, UINT32,   prio,              4) \
X(a, STATIC,   SINGULAR, UINT32,   rtc,               5) \
X(a, STATIC,   SINGULAR, UINT32,   stack_remaining,   6) \
X(a, STATIC,   SINGULAR, INT32,    core_num,          7)
#define rtos_TaskInfo_CALLBACK NULL
#define rtos_TaskInfo_DEFAULT NULL

#define rtos_GetSystemTasks_call_FIELDLIST(X, a) \

#define rtos_GetSystemTasks_call_CALLBACK NULL
#define rtos_GetSystemTasks_call_DEFAULT NULL

#define rtos_GetSystemTasks_reply_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   run_time,          1) \
X(a, STATIC,   REPEATED, MESSAGE,  task_info,         2)
#define rtos_GetSystemTasks_reply_CALLBACK NULL
#define rtos_GetSystemTasks_reply_DEFAULT NULL
#define rtos_GetSystemTasks_reply_task_info_MSGTYPE rtos_TaskInfo

#define rtos_RtosUtilsCallset_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,getSystemTasks_call,msg.getSystemTasks_call),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,getSystemTasks_reply,msg.getSystemTasks_reply),   2)
#define rtos_RtosUtilsCallset_CALLBACK NULL
#define rtos_RtosUtilsCallset_DEFAULT NULL
#define rtos_RtosUtilsCallset_msg_getSystemTasks_call_MSGTYPE rtos_GetSystemTasks_call
#define rtos_RtosUtilsCallset_msg_getSystemTasks_reply_MSGTYPE rtos_GetSystemTasks_reply

extern const pb_msgdesc_t rtos_TaskInfo_msg;
extern const pb_msgdesc_t rtos_GetSystemTasks_call_msg;
extern const pb_msgdesc_t rtos_GetSystemTasks_reply_msg;
extern const pb_msgdesc_t rtos_RtosUtilsCallset_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define rtos_TaskInfo_fields &rtos_TaskInfo_msg
#define rtos_GetSystemTasks_call_fields &rtos_GetSystemTasks_call_msg
#define rtos_GetSystemTasks_reply_fields &rtos_GetSystemTasks_reply_msg
#define rtos_RtosUtilsCallset_fields &rtos_RtosUtilsCallset_msg

/* Maximum encoded size of messages (where known) */
#define rtos_GetSystemTasks_call_size            0
#define rtos_GetSystemTasks_reply_size           907
#define rtos_RtosUtilsCallset_size               910
#define rtos_TaskInfo_size                       54

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
